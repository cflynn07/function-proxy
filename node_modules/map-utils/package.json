{
  "name": "map-utils",
  "version": "0.3.0",
  "description": "map util functions, map, utils, pick, pluck, set, exists",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tjmehta/map-utils.git"
  },
  "keywords": [
    "map",
    "util",
    "functions",
    "map",
    "utils",
    "pick",
    "pluck",
    "set",
    "exists"
  ],
  "author": {
    "name": "Tejesh Mehta"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/tjmehta/map-utils/issues"
  },
  "homepage": "https://github.com/tjmehta/map-utils",
  "devDependencies": {
    "should": "~3.1.3",
    "mocha": "~1.17.1"
  },
  "readme": "map-utils [![Build Status](https://travis-ci.org/tjmehta/map-utils.png)](https://travis-ci.org/tjmehta/map-utils)\n========\n\n### works with great with Array.map\n\n## exists\n### return true for any value other than ull or undefined\n```js\nvar utils = require('map-utils');\n\nutils.exists(null);      // false\nutils.exists(undefined); // false\nutils.exists('foo');     // true\n```\n\n## pick\n### accepts keys and returns a function which accepts an object and return a new object with the keys specified\n```js\nvar utils = require('map-utils');\nvar arr = [\n  {\n    foo: 1,\n    bar: 1,\n    qux: 1\n  },\n  {\n    foo: 2,\n    bar: 2,\n    qux: 2\n  }\n];\n\narr.map(utils.pick('foo', 'bar'));\n/*\n  [\n    {\n      foo: 1,\n      bar: 1\n    },\n    {\n      foo: 2,\n      bar: 2\n    }\n  ]\n*/\n```\n\n## omit\n### accepts keys and returns a function which accepts an object and returns a new object without the keys specified\n```js\nvar utils = require('map-utils');\nvar arr = [\n  {\n    foo: 1,\n    bar: 1,\n    qux: 1\n  },\n  {\n    foo: 2,\n    bar: 2,\n    qux: 2\n  }\n];\n\narr.map(utils.omit('foo', 'bar'));\n/*\n  [\n    {\n      qux: 1\n    },\n    {\n      qux: 2\n    }\n  ]\n*/\n```\n\n## pluck\n### accepts keys and returns a function which accepts an object and returns the value of the key specified\n```js\nvar utils = require('map-utils');\nvar arr = [\n  {\n    foo: 1,\n    bar: 1,\n    qux: 1\n  },\n  {\n    foo: 2,\n    bar: 2,\n    qux: 2\n  }\n];\n\narr.map(utils.pluck('foo')); // [1, 2]\n```\n\n## set\n### accepts obj or key val arguments and returns a function which accepts an object which those key/values will be set on\n```js\nvar utils = require('map-utils');\nvar arr1 = [\n  {\n    foo: 1,\n    bar: 1\n  },\n  {\n    foo: 2,\n    bar: 1\n  }\n];\nvar arr2 = [\n  {\n    foo: 1\n  },\n  {\n    foo: 2\n  }\n];\n\narr1.map(utils.set('qux', 1));\narr2.map(utils.set({ bar:1, qux:1 }));\n/* both arr and arr2 becom:\n  [\n    {\n      foo: 1,\n      bar: 1,\n      qux: 1\n    },\n    {\n      foo: 2,\n      bar: 1,\n      qux: 1\n    }\n  ]\n*/\n```\n\n## unset\n### accepts keys and returns a function which accepts an object which those keys will be deleted from\n```js\nvar utils = require('map-utils');\nvar arr = [\n  {\n    foo: 1,\n    bar: 1,\n    qux: 1\n  },\n  {\n    foo: 2,\n    bar: 2,\n    qux: 2\n  }\n];\n\narr.map(utils.unset('foo', 'bar'));\n/* arr becomes:\n  [\n    {\n      foo: 1,\n      bar: 1\n    },\n    {\n      foo: 2,\n      bar: 2\n    }\n  ]\n*/\n```",
  "readmeFilename": "README.md",
  "_id": "map-utils@0.3.0",
  "_from": "map-utils@"
}
